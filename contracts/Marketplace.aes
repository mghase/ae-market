
@compiler >= 6

include "String.aes"

contract interface NFTInterface =
    datatype metadata_type = URL | IPFS | OBJECT_ID | MAP
    datatype metadata = MetadataIdentifier(string) | MetadataMap(map(string, string))

    record meta_info = 
        { name: string
        , symbol: string
        , base_url: option(string)
        , metadata_type : metadata_type }

  
    entrypoint aex141_extensions : () => list(string)

    // Returns meta information associated with the contract.
    entrypoint meta_info : () => meta_info

    
    entrypoint metadata : (int) => option(metadata)


    entrypoint balance : (address) => option(int)

    entrypoint owner : (int) => option(address)
  
    stateful entrypoint transfer : (address, address, int, option(string)) => unit

    stateful entrypoint approve : (address, int, bool) => unit

    stateful entrypoint approve_all : (address, bool) => unit

  
    entrypoint get_approved : (int) => option(address)

    // Returns true if approved is approved to transact for token.
    entrypoint is_approved : (int, address) => bool

    entrypoint is_approved_for_all : (address, address) => bool



contract NFTMarket =
    
    // Declaration and structure of datatype event
    // and events that will be emitted on changes
    datatype event = MarketItemCreated(int, address, address)

    record marketItem = {
        marketItemId : int,
        nftContractAddress : NFTInterface,
        tokenId : int,
        creator: address,
        seller : address, //person selling the nft
        owner : address, //owner of the nft
        price : int,
        sold : bool,
        canceled : bool
     }
      
    record state = {
        nftContractAddress : NFTInterface,
        totalItem : int, 
        owner : address,
        deployer: address,
        marketItems : map(int, marketItem),//a way to access values of the MarketItem struct above by passing an integer ID
        listingFee : int,
        marketItemIds : int,
        tokensSold : int,
        tokensCanceled : int
     }
    
    stateful entrypoint init(_nftAddress: NFTInterface) = {
        nftContractAddress = _nftAddress,
        totalItem = 0,
        owner = Call.caller,
        deployer = Call.caller,
        marketItems = {},
        listingFee = 1,
        marketItemIds = 0,
        tokensSold = 0,
        tokensCanceled = 0
     }

    payable stateful entrypoint createMarketItem (_nftAddress: NFTInterface,_tokenId : int, _price : int) : int =
        require(_price > 0, "Price must be at least 1 Ae")
        require(Call.value == state.listingFee, "Price must be equal to listing price")
        let i : int = getTotalMarketItemIds() + 1
        let itemCount : int = getTotalItem() + 1



        let _creator = switch(_nftAddress.owner(_tokenId))
            None => abort("INVALID_TOKEN_ID")
            Some(v) => v

        let _marketItem = {
            marketItemId = itemCount,
            nftContractAddress = _nftAddress,
            tokenId  = _tokenId,
            creator = _creator,
            seller = Call.caller, //person selling the nft
            owner = _creator, //owner of the nft
            price = _price,
            sold = false,
            canceled = false
         }

        put(state{marketItems[itemCount] = _marketItem ,marketItemIds = i, totalItem = itemCount})
        itemCount

         

/**
     * @dev Creates a market sale by transfering msg.sender money to the seller and NFT token from the
     * marketplace to the msg.sender. It also sends the listingFee to the marketplace owner.
     */
    payable stateful entrypoint createMarketSale(_nftContractAddress:NFTInterface, _marketItemId:int) =
        let market = getMarketItem(_marketItemId)
        let price:int = market.price
        let tokenId:int = market.tokenId
        let tokenSold:int = getTotalTokensSold() +1
        require(Call.value == price, "Please submit the asking price in order to continue")

        put(state{marketItems[_marketItemId].owner = Call.caller,marketItems[_marketItemId].sold = true, tokensSold = tokenSold})
       
        Chain.spend(market.seller,Call.value)
        Chain.spend(market.owner,state.listingFee)
        _nftContractAddress.transfer(market.seller,Call.caller,tokenId,None)
     
    

    entrypoint getMarketItem(_marketItemId : int): marketItem =
        switch(Map.lookup(_marketItemId, state.marketItems))
           None => abort("There was no market item Found")
           Some(x) => x

    entrypoint getNFTMetaInfo() =
         state.nftContractAddress.meta_info()
       
     /// @notice function to get listingprice
    entrypoint getListingFee() : int =
         state.listingFee
    
    stateful entrypoint setListingFee(_fee : int) : int = 
        if(Call.caller == state.owner)
         put(state {listingFee = _fee})
         _fee
        else
          state.listingFee
      
    entrypoint getTotalItem() : int =
         state.totalItem
    
    entrypoint getTotalMarketItemIds() : int =
         state.marketItemIds
    
    entrypoint getTotalTokensSold() : int =
         state.tokensSold

    entrypoint getTotalTokensCanceled() : int =
         state.tokensCanceled 
