@compiler >= 6

include "List.aes"
include "Option.aes"
include "String.aes"

namespace Utils =
    function bool_to_string(v: bool): string =
        switch (v)
            true => "true"
            false => "false"

contract interface NFTInterface =
    datatype metadata_type = URL | IPFS | OBJECT_ID | MAP
    datatype metadata = MetadataIdentifier(string) | MetadataMap(map(string, string))

    record meta_info = 
        { name: string
        , symbol: string
        , base_url: option(string)
        , metadata_type : metadata_type }

    // datatype event 
    //     = Transfer(address, address, int)
    //     | Approval(address, address, int, string)
    //     | ApprovalForAll(address, address, string)

    // Returns a hardcoded list of all implemented extensions on the deployed contract.
    entrypoint aex141_extensions : () => list(string)

    // Returns meta information associated with the contract.
    entrypoint meta_info : () => meta_info

    // Returns meta data associated with a token. 
    // The function is a part of the basic interface, because metadata can be set in the constructor, 
    // as well as by implementing the Mintable extention.
    entrypoint metadata : (int) => option(metadata)

    // Returns the account balance of another account with address `owner` if the account has a balance. 
    // If the owner address is unknown to the contract `None` will be returned. Using `option` type as a 
    // return value allows us to determine if the account has balance of 0, more than 0, or the account 
    // has never had balance and is still unknown to the contract.
    entrypoint balance : (address) => option(int)

    // Returns the owner's address for the provided token if the token is minted. 
    // If the token isn't minted None will be returned.
    entrypoint owner : (int) => option(address)

    // Transfers token from the from address to the to address. Will invoke NFTReceiver if to is a contract receiver. 
    // If provided data will be submitted with the invocation of NFTReceiver. Emits the Transfer event.
    //
    // Should throw if:
    // - Call.caller is not the current owner, an authorized operator or the approved address for this token;
    // - from isn't the current owner;
    // - token isn't a valid token;
    // - the invocation of NFTReceiver fails.    
    stateful entrypoint transfer : (address, address, int, option(string)) => unit

    // Sets the approved address to interact on behalf of an owner for the token. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    // Throws unless caller is the current NFT owner, or an authorized operator of the current owner. 
    // Emits the Approval event.
    stateful entrypoint approve : (address, int, bool) => unit

    // Enables or disables approval for an operator to manage all of the caller's assets. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    // Emits the ApprovalForAll event.
    stateful entrypoint approve_all : (address, bool) => unit

    // Returns the address approved to interact with the token or returns None if no approval has been set. 
    // Throws if token is an invalid token ID.
    entrypoint get_approved : (int) => option(address)

    // Returns true if approved is approved to transact for token.
    entrypoint is_approved : (int, address) => bool

    // Returns true if operator is approved to commit transactions on behalf of owner.
    // Indicates wether an address is an authorized operator for another address.
    entrypoint is_approved_for_all : (address, address) => bool

contract interface NFTReceiver = 
    entrypoint on_nft_received : (address, address, int, option(string)) => bool

// MintableNFT implements the mintable  extension.
contract NFT =
    // Events.
    // Transfer(from, to, token_id)
    // Approval(owner, approved, token_id, enabled)
    // ApprovalForAll(owner, operator, enabled)
    datatype event 
        = Transfer(address, address, int)
        | Approval(address, address, int, string)
        | ApprovalForAll(address, address, string)

    // Metadata has a type and value.
    //
    // Types:
    //
    // URL is any url except IPFS.
    // IPFS is an IPFS ID.
    // OBJECT_ID is a unique identifier for a physical 
    // object (car's VIN number, real estate cadastral code, etc)
    // MAP is for other key/value based properties. 
    //
    // Values:
    // URL, IPFD, OBJECT_ID: string
    // MAP: map(string, string)
    datatype metadata_type = URL | IPFS | OBJECT_ID | MAP
    datatype metadata = MetadataIdentifier(string) | MetadataMap(map(string, string))

    record meta_info = 
        { name: string
        , symbol: string
        , base_url: option(string)
        , metadata_type : metadata_type }
    
    record state = 
        { owner: address
        // , marketplaceAddress : address
        , meta_info: meta_info
        , owners: map(int, address)
        , balances: map(address, int)
        , approvals: map(int, address)
        , operators: map(address, map(address, bool))
        , metadata: map(int, metadata)
        , counter: int }

    // Constructor. During initialization the contract's meta data will
    // be set.
    stateful entrypoint init(name: string, symbol: string) = 
        require(String.length(name) >= 1, "STRING_TOO_SHORT_NAME")
        require(String.length(symbol) >= 1, "STRING_TOO_SHORT_SYMBOL")

        { owner = Call.caller,
        //   marketplaceAddress=_marketplaceAddress,
          meta_info = { name = name, symbol = symbol, base_url = None, metadata_type = MAP },
          owners = {},
          balances = {},
          approvals = {},
          operators = {},
          metadata = {},
          counter = 0 }

    // Issues a new token to the provided address. If the owner is a contract, NFTReceiver will be called 
    // with data if provided.
    //
    // Throws if the call to NFTReceiver implementation failed (safe transfer).
    // 
    // Emits a Transfer event.     
    stateful entrypoint mint(owner: address, metadata: option(metadata), data: option(string)) : int =
        require_contract_owner() // In this example only the contract owner can mint. 

        let token_id = state.counter
        switch(metadata)
            None =>
                put( state { counter = state.counter + 1, balances[owner = 0] @ b = b + 1, owners[token_id] = owner } ) 
            Some(v) => 
                put( state { counter = state.counter + 1, balances[owner = 0] @ b = b + 1, owners[token_id] = owner, metadata[token_id] = v } )

        switch(invoke_nft_receiver(Contract.address, owner, 0, data))
            // owner address is a contract and invocation failed.
            (true, false) => abort("SAFE_MINT_FAILED")
            _ => Chain.event(Transfer(Contract.address, owner, token_id))
        
        token_id

    // Returns a hardcoded list of all implemented extensions on the deployed contract.
    entrypoint aex141_extensions() : list(string) =
        ["mintable"]

    // Returns meta information associated with the token contract.
    entrypoint meta_info() : meta_info = 
        state.meta_info

    // Returns meta data associated with a token. 
    entrypoint metadata(token_id: int) : option(metadata) = 
        switch(Map.lookup(token_id, state.metadata))
            None => None
            Some(v) =>
                if(state.meta_info.metadata_type == URL)
                    // We have URL as the metadata type,
                    // if no base_url is set we return the metadata as it is,
                    // if a base_url is set we concatenate the metadata with the base url.
                    switch(state.meta_info.base_url)
                        None =>
                            Some(v)
                        Some(base_url) =>
                            switch(v)
                                MetadataIdentifier(s) =>
                                    Some(MetadataIdentifier(String.concats([base_url, s])))
                else
                    // Not an URL, so return the metadata as it is.
                    Some(v)

    // Returns the balance of an account with address owner, if the account exists. 
    // If the owner address is unknown to the contract None will be returned. Using option type 
    // as a return value allows us to determine if the account has balance of 0, more than 0, 
    // or the account has never had balance and is still unknown to the contract.
    entrypoint balance(owner: address) : option(int) =
        Map.lookup(owner, state.balances)

    // Returns the owner's address for the provided token, if the token is minted. 
    // If the token isn't minted None will be returned.
    entrypoint owner(token_id: int) : option(address) =
        Map.lookup(token_id, state.owners)

    // Transfers token from the from address to the to address. Will invoke NFTReceiver if to is a contract receiver. 
    // If provided data will be submitted with the invocation of NFTReceiver.
    //
    // Throws if:
    // - Call.caller is not the current owner, an authorized operator or the approved address for this token;
    // - from isn't the current owner;
    // - token isn't a valid token;
    // - the invocation of NFTReceiver fails.
    //
    // Emits the Transfer event.
    stateful entrypoint transfer(from: address, to: address, token_id: int, data: option(string)) : unit =
        require_authorized(token_id)
        require_token_owner(token_id, from)
        
        remove_approval(token_id)
        put( state { balances[from] @b = b - 1, balances[to = 0] @nb = nb + 1, owners[token_id] = to } )
        switch(invoke_nft_receiver(from, to, token_id, data))
            // to address is a contract and invocation failed.
            (true, false) => abort("SAFE_TRANSFER_FAILED")
            _ => Chain.event(Transfer(from, to, token_id))

    // Sets the approved address to interact on behalf of an owner for the token. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    //
    // Throws unless caller is the current NFT owner, or an authorized operator of the current owner. 
    //
    // Emits the Approval event.
    stateful entrypoint approve(approved: address, token_id: int, enabled: bool) : unit =
        require_authorized(token_id)

        if(enabled)
            put( state { approvals[token_id] = approved })
        else
            remove_approval(token_id)
        Chain.event(Approval(state.owners[token_id], approved, token_id, Utils.bool_to_string(enabled)))


    // Enables or disables approval for an operator to manage all of the caller's assets. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    //
    // Emits the ApprovalForAll event.
    stateful entrypoint approve_all(operator: address, enabled: bool) : unit =
        put( state { operators = { [Call.caller] = { [operator] = enabled }} } )
        Chain.event(ApprovalForAll(Call.caller, operator, Utils.bool_to_string(enabled)))

    // Returns the address approved to interact with the token or returns None 
    // if no approval has been set. 
    entrypoint get_approved(token_id: int) : option(address) =
        Map.lookup(token_id, state.approvals)

    // Returns true if a is approved to transact for the token.
    entrypoint is_approved(token_id: int, a: address) : bool =
        switch(Map.lookup(token_id, state.approvals))
            None => false
            Some(o) => o == a

    // Returns true if operator is approved to commit transactions on behalf of owner.
    // Indicates wether an address is an authorized operator for another address.
    entrypoint is_approved_for_all(owner: address, operator: address) : bool =
        switch(Map.lookup(owner, state.operators))
            None => false
            Some(ops) =>
                switch(Map.lookup(operator, ops))
                    None => false
                    Some(v) => v

    // Helper functions

    // Returns true if a is the owner of the token with token_id.
    private function is_token_owner(token_id: int, a: address) : bool =
        switch(Map.lookup(token_id, state.owners))
            None => false
            Some(o) => o == a

    // Throws if the caller is not the contract's owners.
    private function require_contract_owner() : unit =
        require(Call.caller == state.owner, "ONLY_CONTRACT_OWNER_CALL_ALLOWED")

    // Throws if a is not the token's owner.
    private function require_token_owner(token_id: int, a: address) : unit =
        require(is_token_owner(token_id, a), "ONLY_OWNER_CALL_ALLOWED")

    // Throws if the caller is not the token's owner or an operator.
    private function require_token_owner_or_operator(token_id: int) : unit =
        let owner = switch(owner(token_id))
            None => abort("INVALID_TOKEN_ID")
            Some(v) => v
        require(Call.caller == owner || is_approved_for_all(owner, Call.caller), "ONLY_OWNER_OR_OPERATOR_CALL_ALLOWED")

    // Throws if the caller is not the token's owner, approved or operator.
    private function require_authorized(token_id: int) : unit =
        let owner = switch(owner(token_id))
            None => abort("INVALID_TOKEN_ID")
            Some(v) => v
        require(Call.caller == owner || is_approved(token_id, Call.caller) || is_approved_for_all(owner, Call.caller), "ONLY_OWNER_APPROVED_OR_OPERATOR_CALL_ALLOWED")

    // Helper function to remove an approval from the map.
    private stateful function remove_approval(token_id: int) : unit =
        if(Map.member(token_id, state.approvals))
            put( state { approvals = Map.delete(token_id, state.approvals)})
    
    // Helper function for safe transfers.
    // Returns a pair of bool (is_contract, success).
    private function invoke_nft_receiver(from: address, to: address, token_id: int, data: option(string)) : (bool * bool) =
        if(Address.is_contract(to))
            let c = Address.to_contract(to)

            // Try to invoke on_nft_received. 
            switch(c.on_nft_received(from, to, token_id, data, protected = true) : option(bool))
                None => (true, false)       // The contract doesn't implement on_nft_received
                Some(val) => (true, val)
        else
            // The address is NOT a contract.
            (false, false)